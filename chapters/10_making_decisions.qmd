---
title: 'Decision Director: Guiding Your Program''s Path with If Statements'
---

# Chapter 10: Making Decisions - Controlling Your Program's Flow

## Chapter Outline
- Understanding conditional execution
- The `if` statement
- Boolean expressions as conditions
- Adding `else` branches
- Multiple conditions with `elif`
- Nested conditionals
- Best practices for decision making

## Learning Objectives

By the end of this chapter, you will be able to:
- Create programs that can make decisions based on conditions
- Write `if`, `elif`, and `else` statements correctly
- Use boolean expressions to control program flow
- Design effective branching logic
- Implement multiple decision paths in your programs
- Apply conditional logic to solve real-world problems

## 1. Introduction: Programs That Adapt

The real power of programming appears when your code can make decisions. Without the ability to choose different paths, programs would simply execute the same steps in the same order every time - limiting their usefulness.

With conditional statements, your programs become responsive - they can adapt to different situations, user inputs, and changing conditions.

***AI Tip: Ask your AI assistant to explain decision-making in programming by comparing it to everyday decisions people make.***

## 2. The Basic `if` Statement

The `if` statement allows your program to execute specific code only when a condition is true:

```python
temperature = 38

if temperature > 35:
    print("It is hot")
```

The structure has two critical parts:
1. A condition (`temperature > 35`) that evaluates to `True` or `False`
2. An indented block of code (the "body") that runs only when the condition is `True`

Notice the colon `:` at the end of the `if` line, and the indentation of the code block. In Python, indentation isn't just for style - it defines the structure of your code.

## 3. Conditions in Detail

Any expression that evaluates to `True` or `False` can be used as a condition. This includes:

- Comparison expressions: `x > y`, `age >= 18`, `name == "Alice"`
- Boolean variables: `is_registered`, `has_permission`
- Membership tests: `"a" in "apple"`, `5 in my_list`
- Identity checks: `user is admin`
- Function calls that return boolean values: `is_valid_email(email)`

You can also store the result of a boolean expression in a variable:

```python
temperature = 38
is_hot = temperature > 35

if is_hot:
    print("It is hot")
```

This approach can make your code more readable, especially with complex conditions.

## 4. Adding Multiple Statements to a Block

To include multiple statements in an `if` block, simply maintain the same indentation level:

```python
temperature = 38

if temperature > 35:
    print("It is hot")
    print("Remember to take your water bottle")
```

All indented statements are part of the block and only execute when the condition is `True`. Once the indentation returns to the original level, you're outside the block.

## 5. The `else` Branch: Providing Alternatives

What if you want to do something when the condition is `False`? The `else` branch handles this case:

```python
temperature = 30

if temperature > 35:
    print("It is a hot day")
    print("Remember to take your water bottle")
else:
    print("It is not a hot day")
    print("No special precautions needed")

print("Enjoy your day")  # This will always execute
```

The `else` branch is optional but useful when you need to choose between two alternatives.

## 6. Multiple Conditions with `elif`

Real-world decisions often involve more than two options. The `elif` (short for "else if") statement lets you check multiple conditions in sequence:

```python
temperature = 22

if temperature > 35:
    print("It is a hot day")
    print("Remember to take your water bottle")
elif temperature < 20:
    print("It is a cold day")
    print("Remember to wear a jumper")
else:
    print("It is a lovely day")
    
print("Enjoy your day")
```

Python evaluates each condition in order, from top to bottom:
1. First, it checks if `temperature > 35`
2. If that's `False`, it checks if `temperature < 20`
3. If both are `False`, it executes the `else` block

Only one block will execute, even if multiple conditions are true.

## 7. Using Boolean Variables for Readability

For complex conditions, storing the results in descriptively named boolean variables can make your code more readable:

```python
temperature = 22

is_hot = temperature > 35
is_cold = temperature < 20

if is_hot:
    print("It is a hot day")
    print("Remember to take your water bottle")
elif is_cold:
    print("It is a cold day")
    print("Remember to wear a jumper")
else:  # neither hot nor cold
    print("It is a lovely day")
    
print("Enjoy your day")
```

This approach clarifies the meaning of each branch and makes the code easier to understand and maintain.

## 8. Common Patterns in Decision Making

Here are some common decision-making patterns you'll use frequently:

### Simple Validation

```python
user_age = int(input("Enter your age: "))

if user_age < 18:
    print("Sorry, you must be 18 or older")
else:
    print("Access granted")
```

### Multiple Independent Conditions

```python
# Each condition is checked independently
if score >= 90:
    print("You got an A!")
    
if attendance >= 80:
    print("Good attendance record!")
```

### Nested Conditionals

```python
# A conditional inside another conditional
has_ticket = True
has_id = False

if has_ticket:
    if has_id:
        print("Enjoy the show!")
    else:
        print("Sorry, you need ID to enter")
else:
    print("You need to purchase a ticket first")
```

## 9. Self-Assessment Quiz

1. What symbol must appear at the end of an `if` statement line?
   a) Semicolon (;)
   b) Period (.)
   c) Colon (:)
   d) Parenthesis ()

2. Which of these is NOT a valid condition for an `if` statement?
   a) `x = 5`
   b) `x > 5`
   c) `x == 5`
   d) `"a" in "apple"`

3. If multiple `elif` conditions are `True`, which block of code will execute?
   a) All blocks with true conditions
   b) Only the first true condition's block
   c) Only the last true condition's block
   d) None of them - an error occurs

4. What happens to code that's at the same indentation level as the `if` statement (not indented further)?
   a) It always executes
   b) It only executes when the condition is True
   c) It only executes when the condition is False
   d) It causes an error

5. How many `elif` branches can you have in a single decision structure?
   a) None - `elif` is not a valid Python keyword
   b) Only one
   c) Up to five
   d) As many as needed

**Answers & Feedback:**
1. c) Colon (:) — The colon marks the beginning of a code block
2. a) `x = 5` — This is an assignment, not a condition (use `==` for equality testing)
3. b) Only the first true condition's block — Python executes the first match and skips the rest
4. a) It always executes — It's outside the conditional block entirely
5. d) As many as needed — There's no limit to `elif` branches

## 10. Common Mistakes to Avoid

- Forgetting the colon (`:`) after `if`, `elif`, or `else`
- Using `=` (assignment) instead of `==` (equality comparison)
- Inconsistent indentation within a block
- Forgetting to handle all possible cases
- Creating overly complex nested conditions instead of simplifying

## Project Corner: Enhancing Chatbot with Multiple Response Paths

Let's enhance our chatbot from previous chapters to handle more complex conversation paths:

```python
def get_response(user_input):
    """Return a response based on the user input."""
    user_input = user_input.lower()
    
    # Check for special commands
    if user_input == "help":
        return """
I understand these topics:
- Greetings (hello, hi)
- Questions about myself (your name, what are you)
- Time-based greetings (good morning, good night)
- Basic emotions (happy, sad, angry)
- Farewells (bye, goodbye)
        """
    
    # Check for greetings
    if "hello" in user_input or "hi" in user_input:
        return f"Hello there, {user_name}!"
    
    # Check for questions about the bot
    elif "your name" in user_input:
        return f"My name is {bot_name}!"
    elif "what are you" in user_input:
        return "I'm a simple chatbot created as a Python learning project."
    
    # Check for time-based greetings
    elif "good morning" in user_input:
        return f"Good morning, {user_name}! Hope your day is starting well."
    elif "good night" in user_input:
        return f"Good night, {user_name}! Sleep well."
    
    # Check for emotions
    elif "happy" in user_input:
        return "Happiness is wonderful! What made you happy today?"
    elif "sad" in user_input:
        return "I'm sorry to hear that. Remember that tough times pass eventually."
    elif "angry" in user_input:
        return "Take a deep breath. Things will look better after a moment of calm."
    
    # Check for farewells
    elif "bye" in user_input or "goodbye" in user_input:
        return f"Goodbye, {user_name}! Come back soon!"
    
    # Default response
    else:
        return "I'm not sure how to respond to that yet. Try saying 'help' for options."

# Main chat loop
bot_name = "PyBot"
print(f"Hello! I'm {bot_name}. Type 'bye' to exit.")
user_name = input("What's your name? ")
print(f"Nice to meet you, {user_name}!")

while True:
    user_input = input(f"{user_name}> ")
    if user_input.lower() == "bye":
        print(f"{bot_name}> Goodbye, {user_name}!")
        break
    
    response = get_response(user_input)
    print(f"{bot_name}> {response}")
```

**Challenges**:
- Add nested conditionals to create more specific responses
- Create a boolean variable for each response category (e.g., `is_greeting`, `is_question`)
- Add a secret command that only works with a specific passphrase
- Create a "mood system" for the chatbot that changes responses based on a variable

## Cross-References

- Previous Chapter: [Creating Functions](09_creating_functions.qmd)
- Next Chapter: [Lists](11_lists.qmd)
- Related Topics: Operators (Chapter 7), Loops (Chapter 12)

***AI Tip: Ask your AI assistant to help you visualize decision trees for complex conditional logic.***

## Decision Structures as Program Maps

Think of your conditional statements as creating a map of possible paths through your program. A well-designed decision structure:

1. Considers all possible cases 
2. Makes the most common path easy to follow
3. Handles edge cases gracefully
4. Communicates intent through clear conditions

As you build more complex programs, your ability to craft effective decision structures will determine how robust, adaptable, and maintainable your code becomes.
