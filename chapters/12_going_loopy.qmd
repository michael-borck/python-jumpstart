---
title: "Going Loopy: Repeating Code Without Losing Your Mind"
---

# Chapter 12: Loops - Automating Repetitive Tasks

## Chapter Outline
- Understanding loops and iteration
- For loops with lists and ranges
- While loops
- Loop control with break and continue
- Nested loops
- Common loop patterns

## Learning Objectives

By the end of this chapter, you will be able to:
- Understand when and why to use loops in your programs
- Create and use for loops to iterate through sequences
- Implement while loops for condition-based repetition
- Control loop execution with break and continue statements
- Use nested loops for complex iteration patterns
- Apply loops to solve real programming problems

## 1. Introduction: The Power of Repetition

Imagine you need to print the numbers from 1 to 100. Would you write 100 separate print statements? Of course not! Loops are programming constructs that allow you to repeat code without having to write it multiple times. They are essential for:

- Processing collections of data
- Repeating actions until a condition is met
- Automating repetitive tasks
- Creating games and simulations
- Processing user input

Let's look at a simple example to see why loops are useful:

```python
# Without loops (repetitive and tedious)
print(10)
print(9)
print(8)
print(7)
print(6)
print(5)
print(4)
print(3)
print(2)
print(1)
print("Blast Off!")

# With a loop (elegant and efficient)
for count in [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]:
    print(count)
print("Blast Off!")
```

Both code snippets produce the same output, but the loop version is more concise, easier to modify, and less prone to errors.

***AI Tip: Ask your AI assistant to identify repetitive tasks in your own projects that could be simplified with loops.***

## 2. For Loops: Iteration Through Sequences

The `for` loop is used to iterate through a sequence (like a list, tuple, string, or range). The basic syntax is:

```python
for item in sequence:
    # Code to execute for each item
```

Here's a simple for loop that iterates through a list of numbers:

```python
for N in [2, 3, 5, 7]:
    print(N, end=' ')  # Output: 2 3 5 7
```

### Using the `range()` Function

The `range()` function generates a sequence of numbers, which makes it perfect for creating loops that run a specific number of times:

```python
# Basic range (0 to 9)
for i in range(10):
    print(i, end=' ')  # Output: 0 1 2 3 4 5 6 7 8 9

# Range with start and stop (5 to 9)
for i in range(5, 10):
    print(i, end=' ')  # Output: 5 6 7 8 9

# Range with start, stop, and step (0 to 9, counting by 2)
for i in range(0, 10, 2):
    print(i, end=' ')  # Output: 0 2 4 6 8
```

Key points about `range()`:
- `range(stop)`: Generates numbers from 0 to stop-1
- `range(start, stop)`: Generates numbers from start to stop-1
- `range(start, stop, step)`: Generates numbers from start to stop-1, counting by step

### Looping Through Other Sequences

You can use for loops with any iterable object, including strings, lists, and dictionaries:

```python
# Looping through a string
for char in "Python":
    print(char, end='-')  # Output: P-y-t-h-o-n-

# Looping through a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(f"I like {fruit}s")

# Output:
# I like apples
# I like bananas
# I like cherrys
```

## 3. While Loops: Iteration Based on Conditions

While the `for` loop iterates over a sequence, the `while` loop continues executing as long as a condition remains true:

```python
# Basic while loop
i = 0
while i < 10:
    print(i, end=' ')  # Output: 0 1 2 3 4 5 6 7 8 9
    i += 1
```

While loops are particularly useful when:
- You don't know in advance how many iterations you need
- You need to repeat until a specific condition occurs
- You're waiting for user input that meets certain criteria

Here's a simple example of a while loop that continues until the user enters 'quit':

```python
user_input = ""
while user_input.lower() != "quit":
    user_input = input("Enter a command (type 'quit' to exit): ")
    print(f"You entered: {user_input}")
```

### The Infinite Loop

If the condition in a while loop never becomes False, you create an infinite loop:

```python
# BE CAREFUL! This is an infinite loop
while True:
    print("This will run forever!")
```

Infinite loops are sometimes useful when combined with a `break` statement (as we'll see next), but be careful to ensure your loops will eventually terminate!

## 4. Loop Control: Break and Continue

Sometimes you need more fine-grained control over your loops. Python provides two statements for this:

- `break`: Exits the loop completely
- `continue`: Skips the rest of the current iteration and moves to the next one

### The Break Statement

Use `break` to exit a loop early when a certain condition is met:

```python
# Find the first odd number that's divisible by 7
for number in range(1, 100, 2):  # All odd numbers from 1 to 99
    if number % 7 == 0:  # If divisible by 7
        print(f"Found it! {number}")
        break  # Exit the loop
```

Here's another example that uses a `while True` loop (an infinite loop) with a break statement:

```python
# Generate Fibonacci numbers up to 100
a, b = 0, 1
fibonacci = []

while True:
    a, b = b, a + b
    if a > 100:
        break  # Exit when we exceed 100
    fibonacci.append(a)

print(fibonacci)  # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
```

### The Continue Statement

Use `continue` to skip the current iteration and move to the next one:

```python
# Print only odd numbers
for n in range(10):
    if n % 2 == 0:  # If n is even
        continue  # Skip to the next iteration
    print(n, end=' ')  # Output: 1 3 5 7 9
```

## 5. Nested Loops: Loops Within Loops

You can place one loop inside another to create more complex iteration patterns:

```python
# Print a multiplication table (1-5)
for i in range(1, 6):
    for j in range(1, 6):
        print(f"{i}×{j}={i*j}", end="\t")
    print()  # New line after each row
```

This produces:
```
1×1=1   1×2=2   1×3=3   1×4=4   1×5=5
2×1=2   2×2=4   2×3=6   2×4=8   2×5=10
3×1=3   3×2=6   3×3=9   3×4=12  3×5=15
4×1=4   4×2=8   4×3=12  4×4=16  4×5=20
5×1=5   5×2=10  5×3=15  5×4=20  5×5=25
```

Nested loops are powerful but can be computationally expensive. Be careful with deeply nested loops, as each level multiplies the number of iterations.

## 6. Common Loop Patterns

Here are some common patterns you'll see with loops:

### Accumulation Pattern

```python
# Sum all numbers from 1 to 10
total = 0
for num in range(1, 11):
    total += num
print(total)  # Output: 55
```

### Finding Maximum or Minimum

```python
numbers = [45, 22, 14, 65, 97, 72]
max_value = numbers[0]  # Start with the first value

for num in numbers:
    if num > max_value:
        max_value = num

print(max_value)  # Output: 97
```

### Searching for an Element

```python
fruits = ["apple", "banana", "cherry", "date", "elderberry"]
search_for = "cherry"

for fruit in fruits:
    if fruit == search_for:
        print(f"Found {search_for}!")
        break
else:  # This runs if the loop completes without breaking
    print(f"{search_for} not found.")
```

### Building a New Collection

```python
# Create a list of squares from 1 to 10
squares = []
for num in range(1, 11):
    squares.append(num ** 2)
print(squares)  # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
```

## 7. Self-Assessment Quiz

1. Which loop would you use when you know exactly how many iterations you need?
   a) `for` loop
   b) `while` loop
   c) `until` loop
   d) `do-while` loop

2. What is the output of the following code?
   ```python
   for i in range(5):
       print(i, end=' ')
   ```
   a) `1 2 3 4 5`
   b) `0 1 2 3 4`
   c) `0 1 2 3 4 5`
   d) `1 2 3 4`

3. What does the `break` statement do in a loop?
   a) Skips to the next iteration
   b) Exits the current loop completely
   c) Pauses the loop execution temporarily
   d) Returns to the beginning of the loop

4. If you want to skip the rest of the current iteration and move to the next one, which statement would you use?
   a) `pass`
   b) `skip`
   c) `continue`
   d) `next`

5. What happens if the condition in a while loop never becomes False?
   a) The loop will run exactly once
   b) The loop will never run
   c) The loop will run infinitely
   d) Python will automatically break the loop after 1000 iterations

**Answers & Feedback:**
1. a) `for` loop — Best for known number of iterations or iterating through sequences
2. b) `0 1 2 3 4` — range(5) generates numbers from 0 to 4
3. b) Exits the current loop completely — break terminates the loop immediately
4. c) `continue` — This skips remaining code and moves to the next iteration
5. c) The loop will run infinitely — This is called an infinite loop, which may cause your program to hang

## 8. Common Loop Pitfalls

- **Infinite Loops**: Always ensure your while loops have a way to terminate
- **Off-by-One Errors**: Remember that range(n) generates numbers from 0 to n-1
- **Modifying During Iteration**: Be careful when modifying a collection while iterating through it
- **Forgetting to Update the Loop Variable**: In while loops, always update the variable used in the condition
- **Inefficient Nested Loops**: Deeply nested loops can be very slow for large datasets

## Project Corner: Enhancing Your Chatbot with Loops

Let's improve our chatbot with a proper conversation loop and additional features:

```python
def get_response(user_input):
    """Return a response based on the user input."""
    user_input = user_input.lower()

    if "hello" in user_input:
        return f"Hello there, {user_name}!"
    elif "how are you" in user_input:
        return "I'm just a computer program, but thanks for asking!"
    elif "name" in user_input:
        return f"My name is {bot_name}!"
    elif "bye" in user_input or "goodbye" in user_input:
        return "Goodbye! Have a great day!"
    elif "countdown" in user_input:
        # Using a loop to create a countdown
        countdown = "Starting countdown:\n"
        for i in range(5, 0, -1):
            countdown += f"{i}...\n"
        countdown += "Blast off!"
        return countdown
    elif "repeat" in user_input:
        # Extract what to repeat and how many times
        try:
            parts = user_input.split("repeat")[1].strip().split("times")
            phrase = parts[0].strip()
            times = int(parts[1].strip())
            if times > 10:  # Limit repetitions
                return "That's too many repetitions! I'll only repeat up to 10 times."

            repeated = ""
            for i in range(times):
                repeated += f"{i+1}. {phrase}\n"
            return repeated
        except:
            return "To use this feature, say 'repeat [phrase] times [number]'"
    else:
        return "I'm not sure how to respond to that yet."

# Main chat loop
bot_name = "PyBot"
conversation_history = []

def save_to_history(speaker, text):
    conversation_history.append(f"{speaker}: {text}")

def show_history():
    print("\n----- Conversation History -----")
    for entry in conversation_history:
        print(entry)
    print("-------------------------------\n")

print(f"Hello! I'm {bot_name}. Type 'bye' to exit, 'history' to see our conversation.")
print("Try 'countdown' or 'repeat [phrase] times [number]' for some loop magic!")
user_name = input("What's your name? ")
print(f"Nice to meet you, {user_name}!")
save_to_history(bot_name, f"Nice to meet you, {user_name}!")

# Main loop - keeps our chat going until the user says 'bye'
while True:
    user_input = input(f"{user_name}> ")
    save_to_history(user_name, user_input)

    if user_input.lower() == "bye":
        response = f"Goodbye, {user_name}!"
        print(f"{bot_name}> {response}")
        save_to_history(bot_name, response)
        break
    elif user_input.lower() == "history":
        show_history()
        continue

    response = get_response(user_input)
    print(f"{bot_name}> {response}")
    save_to_history(bot_name, response)
```

This enhanced chatbot now:
1. Uses a `while` loop to keep the conversation going until the user says "bye"
2. Implements a countdown feature using a `for` loop
3. Adds a "repeat" feature that shows how loops can generate repeated content
4. Uses the `continue` statement to handle special commands
5. Maintains conversation history using lists and loops

**Challenges**:
- Add a feature that allows the user to play a number guessing game using loops
- Create a "quiz" feature where the chatbot asks a series of questions in a loop
- Implement a feature that lets users search their conversation history for keywords
- Add a "tell me a joke" feature that cycles through a list of jokes

## Cross-References

- Previous Chapter: [Lists](11_lists.qmd)
- Next Chapter: [Strings](13_strings.qmd)
- Related Topics: Functions (Chapter 9), Decisions (Chapter 10)

***AI Tip: Ask your AI assistant to help you identify places where you can replace repetitive code with loops in your existing programs.***

## Why Loops Matter

Beyond just saving you typing, loops are fundamental to programming because they allow you to:

1. **Scale Effortlessly**: Process 10 items or 10 million with the same code
2. **Automate Repetitive Tasks**: Let the computer handle repetition instead of humans
3. **Process Data Dynamically**: Handle data regardless of its size or content
4. **Create Interactive Programs**: Keep programs running and responding to user input
5. **Implement Algorithms**: Many algorithms rely on iteration to solve problems

As you continue your Python journey, you'll find that loops are essential for nearly every meaningful program you create.
