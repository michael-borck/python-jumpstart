[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Jumpstart: Coding Fundamentals for the AI Era",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "chapters/00_contents.html",
    "href": "chapters/00_contents.html",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "",
    "text": "2 Just Enough Python\nThis series introduces the essential components of the programming language Python. The focus is on the programming language and not on the craft of programming. The content does not discuss everything about Python but provides a foundation so you can take it further. The material has been prepared for students in the Faculty of Business and Law at Curtin University but has been updated to include modern AI-assisted programming techniques."
  },
  {
    "objectID": "chapters/00_contents.html#core-python-fundamentals",
    "href": "chapters/00_contents.html#core-python-fundamentals",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.1 Core Python Fundamentals",
    "text": "2.1 Core Python Fundamentals\n\nPython in the Age of AI\nBasic Python Syntax\nValues\nVariables\nOutput\nInput\nOperators"
  },
  {
    "objectID": "chapters/00_contents.html#functions-and-control-flow",
    "href": "chapters/00_contents.html#functions-and-control-flow",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.2 Functions and Control Flow",
    "text": "2.2 Functions and Control Flow\n\nUsing Functions\nCreating Functions\nMaking Decisions"
  },
  {
    "objectID": "chapters/00_contents.html#data-structures-and-iteration",
    "href": "chapters/00_contents.html#data-structures-and-iteration",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.3 Data Structures and Iteration",
    "text": "2.3 Data Structures and Iteration\n\nLists\nGoing Loopy\nStrings\nDictionaries"
  },
  {
    "objectID": "chapters/00_contents.html#working-with-data-and-files",
    "href": "chapters/00_contents.html#working-with-data-and-files",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.4 Working with Data and Files",
    "text": "2.4 Working with Data and Files\n\nFiles"
  },
  {
    "objectID": "chapters/00_contents.html#code-quality-and-organization",
    "href": "chapters/00_contents.html#code-quality-and-organization",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.5 Code Quality and Organization",
    "text": "2.5 Code Quality and Organization\n\nErrors and Exceptions\nDebugging\nTesting\nModules and Packages\nOrientating your Objects"
  },
  {
    "objectID": "chapters/00_contents.html#practical-python-usage",
    "href": "chapters/00_contents.html#practical-python-usage",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.6 Practical Python Usage",
    "text": "2.6 Practical Python Usage\n\nHow to Run Python Code\nHow to Install Python\nGetting Help"
  },
  {
    "objectID": "chapters/00_contents.html#python-in-the-ai-era",
    "href": "chapters/00_contents.html#python-in-the-ai-era",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.7 Python in the AI Era",
    "text": "2.7 Python in the AI Era\n\nAI Programming Assistants\nPython for AI Integration\nAI Assistance Tips\nIntentional Prompting for Python Developers"
  },
  {
    "objectID": "chapters/00_contents.html#project-build-your-own-ai-chatbot",
    "href": "chapters/00_contents.html#project-build-your-own-ai-chatbot",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.8 Project: Build Your Own AI Chatbot",
    "text": "2.8 Project: Build Your Own AI Chatbot\n\nBuilding Your AI-Enhanced Python Chatbot"
  },
  {
    "objectID": "chapters/00_contents.html#similar-python-tutorials",
    "href": "chapters/00_contents.html#similar-python-tutorials",
    "title": "1  Your Python Journey Map: Guide to Chapters and Resources",
    "section": "2.9 Similar Python Tutorials",
    "text": "2.9 Similar Python Tutorials\nHere are some free beginner tutorials that inspired this series. They have a data science focus but you may find them useful in your learning journey.\n\nIntroduction to Python (Microsoft)\nPython (Kaggle)\nWhirlwind Tour of Python\nLearn Python in 1 hour (Video)\nLearn Python Basics for Data Analysis"
  },
  {
    "objectID": "chapters/chatbot_project.html",
    "href": "chapters/chatbot_project.html",
    "title": "29  Chatbot Construction Site: Building Your AI-Enhanced Python Conversation Partner",
    "section": "",
    "text": "30 Building Your AI-Enhanced Python Chatbot\nThis guide outlines an incremental project that spans multiple chapters in the book. As you progress through the Python concepts, you’ll apply your knowledge to build a chatbot that becomes increasingly sophisticated."
  },
  {
    "objectID": "chapters/chatbot_project.html#project-overview",
    "href": "chapters/chatbot_project.html#project-overview",
    "title": "29  Chatbot Construction Site: Building Your AI-Enhanced Python Conversation Partner",
    "section": "30.1 Project Overview",
    "text": "30.1 Project Overview\nThe project follows this progression:\n\nBasic Rule-Based Chatbot (Chapters 1-7)\n\nSimple input/output with hardcoded responses\nBasic string manipulation\nIntroduction to variables and operators\n\nStructured Chatbot (Chapters 8-14)\n\nUsing functions to organize code\nImplementing decision logic with conditionals\nStoring conversation history in lists\nManaging response templates with dictionaries\n\nPersistent Chatbot (Chapters 15-20)\n\nSaving and loading chat history from files\nError handling for robust user interaction\nModular design with functions in separate modules\nObject-oriented approach for a more maintainable chatbot\n\nAI-Enhanced Chatbot (Chapters 21-26)\n\nIntegration with AI services for smarter responses\nUsing modern Python libraries and tools\nAdvanced conversation understanding"
  },
  {
    "objectID": "chapters/chatbot_project.html#chapter-by-chapter-implementation",
    "href": "chapters/chatbot_project.html#chapter-by-chapter-implementation",
    "title": "29  Chatbot Construction Site: Building Your AI-Enhanced Python Conversation Partner",
    "section": "30.2 Chapter-by-Chapter Implementation",
    "text": "30.2 Chapter-by-Chapter Implementation\nThis guide provides code snippets to implement at each stage of your learning journey. Add these to your chatbot as you progress through the related chapters.\n\n30.2.1 Stage 1: Basic Rule-Based Chatbot\nAfter Chapter 4: Variables\n# Simple chatbot using variables\nbot_name = \"PyBot\"\nuser_name = input(\"Hello! I'm \" + bot_name + \". What's your name? \")\nprint(\"Nice to meet you, \" + user_name + \"!\")\nAfter Chapter 5: Output\n# Enhanced output formatting\nprint(f\"Hello {user_name}! I'm {bot_name}, a simple chatbot.\")\nprint(f\"I was created as a learning project in Python.\")\nprint(f\"I don't know much yet, but I'll get smarter as you learn more Python!\")\nAfter Chapter 7: Operators\n# Using operators for basic logic\nuser_input = input(\"Ask me a question: \")\nresponse = \"I'm not sure how to answer that yet.\"\n\nif \"hello\" in user_input.lower():\n    response = f\"Hello there, {user_name}!\"\nelif \"name\" in user_input.lower():\n    response = f\"My name is {bot_name}!\"\nelif \"age\" in user_input.lower():\n    response = \"I was just created, so I'm very young!\"\n    \nprint(response)\n\n\n30.2.2 Stage 2: Structured Chatbot\nAfter Chapter 9: Creating Functions\ndef get_response(user_input):\n    \"\"\"Return a response based on the user input.\"\"\"\n    user_input = user_input.lower()\n    \n    if \"hello\" in user_input:\n        return f\"Hello there, {user_name}!\"\n    elif \"how are you\" in user_input:\n        return \"I'm just a computer program, but thanks for asking!\"\n    elif \"name\" in user_input:\n        return f\"My name is {bot_name}!\"\n    elif \"bye\" in user_input or \"goodbye\" in user_input:\n        return \"Goodbye! Have a great day!\"\n    else:\n        return \"I'm not sure how to respond to that yet.\"\n\n# Main chat loop\nprint(f\"Hello! I'm {bot_name}. Type 'bye' to exit.\")\nuser_name = input(\"What's your name? \")\nprint(f\"Nice to meet you, {user_name}!\")\n\nwhile True:\n    user_input = input(f\"{user_name}&gt; \")\n    if user_input.lower() == \"bye\":\n        print(f\"{bot_name}&gt; Goodbye, {user_name}!\")\n        break\n    \n    response = get_response(user_input)\n    print(f\"{bot_name}&gt; {response}\")\nAfter Chapter 11: Lists\n# Add this to your chatbot code to track conversation history\nconversation_history = []\n\ndef save_to_history(speaker, text):\n    \"\"\"Save an utterance to conversation history.\"\"\"\n    conversation_history.append(f\"{speaker}: {text}\")\n\ndef show_history():\n    \"\"\"Display the conversation history.\"\"\"\n    print(\"\\n----- Conversation History -----\")\n    for entry in conversation_history:\n        print(entry)\n    print(\"-------------------------------\\n\")\n\n# Then in your main loop, update to use these functions:\nwhile True:\n    user_input = input(f\"{user_name}&gt; \")\n    save_to_history(user_name, user_input)\n    \n    if user_input.lower() == \"bye\":\n        response = f\"Goodbye, {user_name}!\"\n        print(f\"{bot_name}&gt; {response}\")\n        save_to_history(bot_name, response)\n        break\n    elif user_input.lower() == \"history\":\n        show_history()\n        continue\n    \n    response = get_response(user_input)\n    print(f\"{bot_name}&gt; {response}\")\n    save_to_history(bot_name, response)\nAfter Chapter 14: Dictionaries\n# Using dictionaries for smarter response patterns\nresponse_patterns = {\n    \"greetings\": [\"hello\", \"hi\", \"hey\", \"howdy\", \"hola\"],\n    \"farewells\": [\"bye\", \"goodbye\", \"see you\", \"cya\", \"farewell\"],\n    \"gratitude\": [\"thanks\", \"thank you\", \"appreciate\"],\n    \"bot_questions\": [\"who are you\", \"what are you\", \"your name\"],\n    \"user_questions\": [\"how are you\", \"what's up\", \"how do you feel\"]\n}\n\nresponse_templates = {\n    \"greetings\": [f\"Hello, {user_name}!\", f\"Hi there, {user_name}!\", \"Great to see you again!\"],\n    \"farewells\": [\"Goodbye!\", \"See you later!\", \"Until next time!\"],\n    \"gratitude\": [\"You're welcome!\", \"Happy to help!\", \"No problem at all.\"],\n    \"bot_questions\": [f\"I'm {bot_name}, your chatbot assistant!\", \"I'm just a simple Python chatbot.\"],\n    \"user_questions\": [\"I'm just a program, but I'm working well!\", \"I'm here and ready to chat!\"]\n}\n\nimport random\n\ndef get_response(user_input):\n    \"\"\"Get a more sophisticated response using dictionaries.\"\"\"\n    user_input = user_input.lower()\n    \n    # Check each category of responses\n    for category, patterns in response_patterns.items():\n        for pattern in patterns:\n            if pattern in user_input:\n                # Return a random response from the appropriate category\n                return random.choice(response_templates[category])\n    \n    # Default response if no patterns match\n    return \"I'm still learning. Can you tell me more?\"\n\n\n30.2.3 Stage 3: Persistent Chatbot\nAfter Chapter 15: Files\n# Add to your chatbot the ability to save and load conversation history\nimport datetime\n\ndef save_conversation():\n    \"\"\"Save the current conversation to a file.\"\"\"\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"chat_with_{user_name}_{timestamp}.txt\"\n    \n    with open(filename, \"w\") as f:\n        f.write(f\"Conversation with {bot_name} and {user_name}\\n\")\n        f.write(f\"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\\n\")\n        \n        for entry in conversation_history:\n            f.write(f\"{entry}\\n\")\n    \n    return filename\n\n# Add to your main loop:\nwhile True:\n    # ... existing code ...\n    \n    if user_input.lower() == \"save\":\n        filename = save_conversation()\n        print(f\"{bot_name}&gt; Conversation saved to {filename}\")\n        continue\nAfter Chapter 16: Errors and Exceptions\n# Add error handling to your chatbot\ndef load_conversation(filename):\n    \"\"\"Load a previous conversation from a file.\"\"\"\n    try:\n        with open(filename, \"r\") as f:\n            lines = f.readlines()\n            \n        print(\"\\n----- Loaded Conversation -----\")\n        for line in lines:\n            print(line.strip())\n        print(\"-------------------------------\\n\")\n        return True\n        \n    except FileNotFoundError:\n        print(f\"{bot_name}&gt; Sorry, I couldn't find that file.\")\n        return False\n    except Exception as e:\n        print(f\"{bot_name}&gt; An error occurred: {str(e)}\")\n        return False\n\n# Add to your main loop:\nwhile True:\n    # ... existing code ...\n    \n    if user_input.lower().startswith(\"load \"):\n        filename = user_input[5:].strip()\n        load_conversation(filename)\n        continue\nAfter Chapter 19: Modules and Packages\n# Organize your chatbot into a module structure\n# You would create these files:\n\n# chatbot/response_manager.py\n\"\"\"Functions for generating chatbot responses.\"\"\"\nimport random\n\nclass ResponseManager:\n    def __init__(self, bot_name):\n        self.bot_name = bot_name\n        self.response_patterns = {\n            # ... your patterns here ...\n        }\n        \n        self.response_templates = {\n            # ... your templates here ...\n        }\n    \n    def get_response(self, user_input, user_name):\n        \"\"\"Generate a response to the user input.\"\"\"\n        # Your response logic here\n\n# chatbot/history_manager.py\n\"\"\"Functions for managing conversation history.\"\"\"\nimport datetime\n\nclass HistoryManager:\n    def __init__(self):\n        self.conversation_history = []\n    \n    def add_to_history(self, speaker, text):\n        \"\"\"Add a message to history.\"\"\"\n        self.conversation_history.append(f\"{speaker}: {text}\")\n    \n    def show_history(self):\n        \"\"\"Display the conversation history.\"\"\"\n        # Your display code here\n    \n    def save_conversation(self, user_name, bot_name):\n        \"\"\"Save the conversation to a file.\"\"\"\n        # Your save code here\n\n# chatbot/main.py\n\"\"\"Main chatbot interface.\"\"\"\nfrom chatbot.response_manager import ResponseManager\nfrom chatbot.history_manager import HistoryManager\n\ndef run_chatbot():\n    \"\"\"Run the main chatbot loop.\"\"\"\n    bot_name = \"PyBot\"\n    response_manager = ResponseManager(bot_name)\n    history_manager = HistoryManager()\n    \n    print(f\"Hello! I'm {bot_name}. Type 'bye' to exit.\")\n    user_name = input(\"What's your name? \")\n    print(f\"Nice to meet you, {user_name}!\")\n    \n    # Main chat loop\n    while True:\n        # Your chatbot logic here\nAfter Chapter 20: Object-Oriented Python\n# Convert your chatbot to a fully object-oriented design\n\nclass Chatbot:\n    \"\"\"A simple chatbot that becomes smarter as you learn Python.\"\"\"\n    \n    def __init__(self, name=\"PyBot\"):\n        self.name = name\n        self.user_name = None\n        self.conversation_history = []\n        self.response_patterns = {\n            # ... your patterns ...\n        }\n        self.response_templates = {\n            # ... your templates ...\n        }\n    \n    def greet(self):\n        \"\"\"Greet the user and get their name.\"\"\"\n        print(f\"Hello! I'm {self.name}. Type 'bye' to exit.\")\n        self.user_name = input(\"What's your name? \")\n        print(f\"Nice to meet you, {self.user_name}!\")\n    \n    def get_response(self, user_input):\n        \"\"\"Generate a response to the user input.\"\"\"\n        # Your response logic here\n    \n    def add_to_history(self, speaker, text):\n        \"\"\"Add a message to the conversation history.\"\"\"\n        # Your history code here\n    \n    def save_conversation(self):\n        \"\"\"Save the conversation to a file.\"\"\"\n        # Your save code here\n    \n    def load_conversation(self, filename):\n        \"\"\"Load a conversation from a file.\"\"\"\n        # Your load code here\n    \n    def run(self):\n        \"\"\"Run the main chatbot loop.\"\"\"\n        self.greet()\n        \n        while True:\n            # Your main loop logic here\n\n# To use:\nif __name__ == \"__main__\":\n    bot = Chatbot()\n    bot.run()\n\n\n30.2.4 Stage 4: AI-Enhanced Chatbot\nAfter Chapter 25: Python for AI Integration\n# Enhance your chatbot with AI capabilities\nimport os\nfrom dotenv import load_dotenv\nimport openai  # You'll need to pip install openai\n\n# Load API key from environment variable\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nclass AIEnhancedChatbot(Chatbot):\n    \"\"\"A chatbot enhanced with AI capabilities.\"\"\"\n    \n    def __init__(self, name=\"AI-PyBot\"):\n        super().__init__(name)\n        self.ai_mode = False\n        self.conversation_context = []\n    \n    def toggle_ai_mode(self):\n        \"\"\"Toggle between rule-based and AI-powered responses.\"\"\"\n        self.ai_mode = not self.ai_mode\n        return f\"AI mode is now {'on' if self.ai_mode else 'off'}\"\n    \n    def get_ai_response(self, user_input):\n        \"\"\"Get a response from the OpenAI API.\"\"\"\n        # Add to conversation context\n        self.conversation_context.append({\"role\": \"user\", \"content\": user_input})\n        \n        try:\n            # Get response from OpenAI\n            response = openai.ChatCompletion.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[\n                    {\"role\": \"system\", \"content\": f\"You are {self.name}, a helpful assistant chatbot. Respond in a friendly, concise manner.\"},\n                    *self.conversation_context\n                ]\n            )\n            \n            # Extract and save the assistant's response\n            ai_response = response.choices[0].message[\"content\"]\n            self.conversation_context.append({\"role\": \"assistant\", \"content\": ai_response})\n            \n            # Keep context window manageable (retain last 10 exchanges)\n            if len(self.conversation_context) &gt; 20:\n                self.conversation_context = self.conversation_context[-20:]\n                \n            return ai_response\n            \n        except Exception as e:\n            return f\"AI error: {str(e)}\"\n    \n    def get_response(self, user_input):\n        \"\"\"Get a response using either rule-based or AI approach.\"\"\"\n        if user_input.lower() == \"ai mode\":\n            return self.toggle_ai_mode()\n            \n        if self.ai_mode:\n            return self.get_ai_response(user_input)\n        else:\n            return super().get_response(user_input)"
  },
  {
    "objectID": "chapters/chatbot_project.html#project-challenges-and-extensions",
    "href": "chapters/chatbot_project.html#project-challenges-and-extensions",
    "title": "29  Chatbot Construction Site: Building Your AI-Enhanced Python Conversation Partner",
    "section": "30.3 Project Challenges and Extensions",
    "text": "30.3 Project Challenges and Extensions\nAs you become more comfortable with Python, try these challenges to enhance your chatbot further:\n\nSentiment Analysis: Analyze the sentiment of user messages and adjust responses accordingly.\nWeb Integration: Make your chatbot accessible via a simple web interface using Flask.\nVoice Capabilities: Add text-to-speech and speech-to-text capabilities.\nKnowledge Base: Create a system for your chatbot to learn facts and retrieve them when asked.\nMulti-language Support: Add the ability to detect and respond in different languages."
  },
  {
    "objectID": "chapters/chatbot_project.html#how-to-use-this-guide",
    "href": "chapters/chatbot_project.html#how-to-use-this-guide",
    "title": "29  Chatbot Construction Site: Building Your AI-Enhanced Python Conversation Partner",
    "section": "30.4 How to Use This Guide",
    "text": "30.4 How to Use This Guide\n\nWork through the book chapters in order\nWhen you reach a chapter mentioned in this guide, implement the corresponding chatbot enhancements\nTest and experiment with the chatbot after each implementation\nBy the end of the book, you’ll have a sophisticated AI-enhanced chatbot built entirely by you!\n\nRemember: This project is meant to be flexible. Feel free to customize your chatbot, add your own features, and make it truly yours!"
  }
]